{"version":3,"sources":["components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","types/Completion.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","chooseTodoHandler","selectedTodo","className","map","userId","id","title","completed","type","onClick","TodoFilter","valueSelection","setValueSelection","searchResult","setSearchResult","onSubmit","event","preventDefault","value","onChange","target","placeholder","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Completion","getUser","Loader","TodoModal","closeModalHandler","useState","user","setUser","userLoaded","setUserLoaded","useEffect","loadUserFromServer","a","userFromServer","href","email","name","App","setTodos","setSelectedTodo","todosLoaded","setTodosLoaded","loadTodosFromServer","todosFromServer","lowercaseSearchReasult","toLowerCase","searchedTodos","filter","includes","Active","Completed","todo","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.40632ef3.chunk.js","sourcesContent":["import { FC } from 'react';\nimport { Todo } from '../../types/Todo';\n\ninterface TodoListProp {\n  todos: Todo[];\n  chooseTodoHandler: (todo: Todo) => void;\n  selectedTodo: Todo | null;\n}\n\nexport const TodoList: FC<TodoListProp> = ({\n  todos,\n  chooseTodoHandler,\n  selectedTodo,\n}) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {todos.map(({\n        userId, id, title, completed,\n      }) => (\n        <tr\n          data-cy=\"todo\"\n          className={id === selectedTodo?.id\n            ? 'has-background-info-light'\n            : ''}\n        >\n          <td className=\"is-vcentered\">{id}</td>\n          <td className=\"is-vcentered\">\n            {completed && (\n              <span className=\"icon\" data-cy=\"iconCompleted\">\n                <i className=\"fas fa-check\" />\n              </span>\n            )}\n          </td>\n          <td className=\"is-vcentered is-expanded\">\n            <p\n              className={completed\n                ? 'has-text-success'\n                : 'has-text-danger'}\n            >\n              {title}\n            </p>\n          </td>\n          <td className=\"has-text-right is-vcentered\">\n            <button\n              data-cy=\"selectButton\"\n              className=\"button\"\n              type=\"button\"\n              onClick={() => chooseTodoHandler({\n                userId, id, title, completed,\n              })}\n            >\n              <span className=\"icon\">\n                <i className={id === selectedTodo?.id\n                  ? 'far fa-eye-slash'\n                  : 'far fa-eye'}\n                />\n              </span>\n            </button>\n          </td>\n        </tr>\n      ))}\n    </tbody>\n  </table>\n);\n","import { ChangeEvent, FC, FormEvent } from 'react';\n\ninterface TodoFilterProps {\n  valueSelection: string;\n  setValueSelection: (change: string) => void;\n  searchResult: string;\n  setSearchResult: (change: string) => void;\n}\n\nexport const TodoFilter: FC<TodoFilterProps> = ({\n  valueSelection,\n  setValueSelection,\n  searchResult,\n  setSearchResult,\n}) => {\n  const handleSelection = (event: ChangeEvent<HTMLSelectElement>) => {\n    setValueSelection(event.target.value);\n  };\n\n  const handleSearching = (event: ChangeEvent<HTMLInputElement>) => {\n    setSearchResult(event.target.value);\n  };\n\n  const emptySearch = () => {\n    setSearchResult('');\n  };\n\n  const handleFormSubmit = (event: FormEvent) => {\n    event.preventDefault();\n  };\n\n  return (\n    <form className=\"field has-addons\" onSubmit={handleFormSubmit}>\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={valueSelection}\n            onChange={handleSelection}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={searchResult}\n          onChange={handleSearching}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {searchResult && (\n            // eslint-disable-next-line jsx-a11y/control-has-associated-label\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={emptySearch}\n            />\n          )}\n        </span>\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(2000)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","export enum Completion {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { FC, useEffect, useState } from 'react';\nimport { getUser } from '../../api';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\n\ninterface TodoModalProps {\n  selectedTodo: Todo;\n  closeModalHandler: () => void;\n}\n\nexport const TodoModal: FC<TodoModalProps> = ({\n  selectedTodo,\n  closeModalHandler,\n}) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [userLoaded, setUserLoaded] = useState(false);\n  const {\n    userId, id, title, completed,\n  } = selectedTodo;\n\n  useEffect(() => {\n    const loadUserFromServer = async () => {\n      const userFromServer = await getUser(userId);\n\n      setUser(userFromServer);\n      setUserLoaded(true);\n    };\n\n    loadUserFromServer();\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!userLoaded\n        ? <Loader />\n        : (\n          <div className=\"modal-card\">\n            <header className=\"modal-card-head\">\n              <div\n                className=\"modal-card-title has-text-weight-medium\"\n                data-cy=\"modal-header\"\n              >\n                {`Todo #${id}`}\n              </div>\n\n              {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n              <button\n                type=\"button\"\n                className=\"delete\"\n                data-cy=\"modal-close\"\n                onClick={closeModalHandler}\n              />\n            </header>\n\n            <div className=\"modal-card-body\">\n              <p className=\"block\" data-cy=\"modal-title\">\n                {title}\n              </p>\n\n              <p className=\"block\" data-cy=\"modal-user\">\n                {completed\n                  ? <strong className=\"has-text-success\">Done</strong>\n                  : <strong className=\"has-text-danger\">Planned</strong>}\n\n                {' by '}\n\n                <a href={`mailto:${user?.email}`}>\n                  {user?.name}\n                </a>\n              </p>\n            </div>\n          </div>\n        )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { Completion } from './types/Completion';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n  const [todosLoaded, setTodosLoaded] = useState(false);\n\n  const [valueSelection, setValueSelection] = useState('All');\n  const [searchResult, setSearchResult] = useState('');\n\n  useEffect(() => {\n    const loadTodosFromServer = async () => {\n      const todosFromServer = await getTodos();\n\n      setTodos(todosFromServer);\n      setTodosLoaded(true);\n    };\n\n    loadTodosFromServer();\n  }, []);\n\n  const chooseTodo = (todo: Todo | null) => {\n    setSelectedTodo(todo);\n  };\n\n  const closeModal = () => {\n    setSelectedTodo(null);\n  };\n\n  const lowercaseSearchReasult = searchResult.toLowerCase();\n\n  const searchedTodos = todos.filter(({ title }) => title.toLowerCase().includes(lowercaseSearchReasult));\n\n  const filteredSearchedTodos = () => {\n    const result = searchedTodos.filter(({ completed }) => {\n      switch (valueSelection) {\n        case Completion.Active:\n          return !completed;\n\n        case Completion.Completed:\n          return completed;\n\n        default:\n          return searchedTodos;\n      }\n    });\n\n    return result;\n  };\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                valueSelection={valueSelection}\n                setValueSelection={setValueSelection}\n                searchResult={searchResult}\n                setSearchResult={setSearchResult}\n              />\n            </div>\n\n            <div className=\"block\">\n              {!todosLoaded\n                ? <Loader />\n                : (\n                  <TodoList\n                    todos={filteredSearchedTodos()}\n                    chooseTodoHandler={chooseTodo}\n                    selectedTodo={selectedTodo}\n                  />\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal\n          selectedTodo={selectedTodo}\n          closeModalHandler={closeModal}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}